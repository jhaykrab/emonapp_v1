import { Action, RunActionResponse } from '../types/action';
import * as apis from '../types/apis';
import { FlowState } from '../types/flow';
import { TraceData } from '../types/trace';
import { StreamingCallback } from './types';
export declare class Runner {
    readonly directory: string;
    readonly autoReload: boolean;
    readonly buildOnStart: boolean;
    private appProcess;
    private watcher;
    private changeTimeout;
    private buildCommand?;
    private reflectionApiPort;
    private reflectionApiUrl;
    constructor(options?: {
        directory?: string;
        autoReload?: boolean;
        buildOnStart?: boolean;
    });
    start(): Promise<boolean>;
    attach(attachAddress: string): Promise<void>;
    stop(): Promise<void>;
    reloadApp(): Promise<void>;
    private startApp;
    private stopApp;
    private watchForChanges;
    private handleFileChange;
    private build;
    private httpErrorHandler;
    healthCheck(): Promise<boolean>;
    sendQuit(): Promise<boolean>;
    waitUntilHealthy(): Promise<void>;
    listActions(): Promise<Record<string, Action>>;
    runAction(input: apis.RunActionRequest, streamingCallback?: StreamingCallback<any>): Promise<RunActionResponse>;
    listTraces(input: apis.ListTracesRequest): Promise<apis.ListTracesResponse>;
    getTrace(input: apis.GetTraceRequest): Promise<TraceData>;
    listFlowStates(input: apis.ListFlowStatesRequest): Promise<apis.ListFlowStatesResponse>;
    getFlowState(input: apis.GetFlowStateRequest): Promise<FlowState>;
}

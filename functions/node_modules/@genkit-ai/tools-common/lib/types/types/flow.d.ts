import * as z from 'zod';
export declare const FlowInvokeEnvelopeMessageSchema: z.ZodObject<{
    start: z.ZodOptional<z.ZodObject<{
        input: z.ZodOptional<z.ZodUnknown>;
        labels: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        input?: unknown;
        labels?: Record<string, string> | undefined;
    }, {
        input?: unknown;
        labels?: Record<string, string> | undefined;
    }>>;
    schedule: z.ZodOptional<z.ZodObject<{
        input: z.ZodOptional<z.ZodUnknown>;
        delay: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        input?: unknown;
        delay?: number | undefined;
    }, {
        input?: unknown;
        delay?: number | undefined;
    }>>;
    runScheduled: z.ZodOptional<z.ZodObject<{
        flowId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        flowId: string;
    }, {
        flowId: string;
    }>>;
    retry: z.ZodOptional<z.ZodObject<{
        flowId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        flowId: string;
    }, {
        flowId: string;
    }>>;
    resume: z.ZodOptional<z.ZodObject<{
        flowId: z.ZodString;
        payload: z.ZodOptional<z.ZodUnknown>;
    }, "strip", z.ZodTypeAny, {
        flowId: string;
        payload?: unknown;
    }, {
        flowId: string;
        payload?: unknown;
    }>>;
    state: z.ZodOptional<z.ZodObject<{
        flowId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        flowId: string;
    }, {
        flowId: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    start?: {
        input?: unknown;
        labels?: Record<string, string> | undefined;
    } | undefined;
    schedule?: {
        input?: unknown;
        delay?: number | undefined;
    } | undefined;
    runScheduled?: {
        flowId: string;
    } | undefined;
    retry?: {
        flowId: string;
    } | undefined;
    resume?: {
        flowId: string;
        payload?: unknown;
    } | undefined;
    state?: {
        flowId: string;
    } | undefined;
}, {
    start?: {
        input?: unknown;
        labels?: Record<string, string> | undefined;
    } | undefined;
    schedule?: {
        input?: unknown;
        delay?: number | undefined;
    } | undefined;
    runScheduled?: {
        flowId: string;
    } | undefined;
    retry?: {
        flowId: string;
    } | undefined;
    resume?: {
        flowId: string;
        payload?: unknown;
    } | undefined;
    state?: {
        flowId: string;
    } | undefined;
}>;
export type FlowInvokeEnvelopeMessage = z.infer<typeof FlowInvokeEnvelopeMessageSchema>;
export declare const FlowStateExecutionSchema: z.ZodObject<{
    startTime: z.ZodOptional<z.ZodNumber>;
    endTime: z.ZodOptional<z.ZodNumber>;
    traceIds: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    traceIds: string[];
    startTime?: number | undefined;
    endTime?: number | undefined;
}, {
    traceIds: string[];
    startTime?: number | undefined;
    endTime?: number | undefined;
}>;
export type FlowStateExecution = z.infer<typeof FlowStateExecutionSchema>;
export declare const FlowResponseSchema: z.ZodObject<{
    response: z.ZodNullable<z.ZodUnknown>;
}, "strip", z.ZodTypeAny, {
    response?: unknown;
}, {
    response?: unknown;
}>;
export declare const FlowErrorSchema: z.ZodObject<{
    error: z.ZodOptional<z.ZodString>;
    stacktrace: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    error?: string | undefined;
    stacktrace?: string | undefined;
}, {
    error?: string | undefined;
    stacktrace?: string | undefined;
}>;
export type FlowError = z.infer<typeof FlowErrorSchema>;
export declare const FlowResultSchema: z.ZodIntersection<z.ZodObject<{
    response: z.ZodNullable<z.ZodUnknown>;
}, "strip", z.ZodTypeAny, {
    response?: unknown;
}, {
    response?: unknown;
}>, z.ZodObject<{
    error: z.ZodOptional<z.ZodString>;
    stacktrace: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    error?: string | undefined;
    stacktrace?: string | undefined;
}, {
    error?: string | undefined;
    stacktrace?: string | undefined;
}>>;
export declare const OperationSchema: z.ZodObject<{
    name: z.ZodString;
    metadata: z.ZodOptional<z.ZodUnknown>;
    done: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    result: z.ZodOptional<z.ZodIntersection<z.ZodObject<{
        response: z.ZodNullable<z.ZodUnknown>;
    }, "strip", z.ZodTypeAny, {
        response?: unknown;
    }, {
        response?: unknown;
    }>, z.ZodObject<{
        error: z.ZodOptional<z.ZodString>;
        stacktrace: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        error?: string | undefined;
        stacktrace?: string | undefined;
    }, {
        error?: string | undefined;
        stacktrace?: string | undefined;
    }>>>;
    blockedOnStep: z.ZodOptional<z.ZodObject<{
        name: z.ZodString;
        schema: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        schema?: string | undefined;
    }, {
        name: string;
        schema?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    done: boolean;
    metadata?: unknown;
    result?: ({
        response?: unknown;
    } & {
        error?: string | undefined;
        stacktrace?: string | undefined;
    }) | undefined;
    blockedOnStep?: {
        name: string;
        schema?: string | undefined;
    } | undefined;
}, {
    name: string;
    metadata?: unknown;
    result?: ({
        response?: unknown;
    } & {
        error?: string | undefined;
        stacktrace?: string | undefined;
    }) | undefined;
    done?: boolean | undefined;
    blockedOnStep?: {
        name: string;
        schema?: string | undefined;
    } | undefined;
}>;
export type Operation = z.infer<typeof OperationSchema>;
export declare const FlowStateSchema: z.ZodObject<{
    name: z.ZodOptional<z.ZodString>;
    flowId: z.ZodString;
    input: z.ZodUnknown;
    startTime: z.ZodNumber;
    cache: z.ZodRecord<z.ZodString, z.ZodObject<{
        value: z.ZodOptional<z.ZodUnknown>;
        empty: z.ZodOptional<z.ZodLiteral<true>>;
    }, "strip", z.ZodTypeAny, {
        value?: unknown;
        empty?: true | undefined;
    }, {
        value?: unknown;
        empty?: true | undefined;
    }>>;
    eventsTriggered: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    blockedOnStep: z.ZodNullable<z.ZodObject<{
        name: z.ZodString;
        schema: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        schema?: string | undefined;
    }, {
        name: string;
        schema?: string | undefined;
    }>>;
    operation: z.ZodObject<{
        name: z.ZodString;
        metadata: z.ZodOptional<z.ZodUnknown>;
        done: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
        result: z.ZodOptional<z.ZodIntersection<z.ZodObject<{
            response: z.ZodNullable<z.ZodUnknown>;
        }, "strip", z.ZodTypeAny, {
            response?: unknown;
        }, {
            response?: unknown;
        }>, z.ZodObject<{
            error: z.ZodOptional<z.ZodString>;
            stacktrace: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            error?: string | undefined;
            stacktrace?: string | undefined;
        }, {
            error?: string | undefined;
            stacktrace?: string | undefined;
        }>>>;
        blockedOnStep: z.ZodOptional<z.ZodObject<{
            name: z.ZodString;
            schema: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            schema?: string | undefined;
        }, {
            name: string;
            schema?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        done: boolean;
        metadata?: unknown;
        result?: ({
            response?: unknown;
        } & {
            error?: string | undefined;
            stacktrace?: string | undefined;
        }) | undefined;
        blockedOnStep?: {
            name: string;
            schema?: string | undefined;
        } | undefined;
    }, {
        name: string;
        metadata?: unknown;
        result?: ({
            response?: unknown;
        } & {
            error?: string | undefined;
            stacktrace?: string | undefined;
        }) | undefined;
        done?: boolean | undefined;
        blockedOnStep?: {
            name: string;
            schema?: string | undefined;
        } | undefined;
    }>;
    traceContext: z.ZodOptional<z.ZodString>;
    executions: z.ZodArray<z.ZodObject<{
        startTime: z.ZodOptional<z.ZodNumber>;
        endTime: z.ZodOptional<z.ZodNumber>;
        traceIds: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        traceIds: string[];
        startTime?: number | undefined;
        endTime?: number | undefined;
    }, {
        traceIds: string[];
        startTime?: number | undefined;
        endTime?: number | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    flowId: string;
    startTime: number;
    blockedOnStep: {
        name: string;
        schema?: string | undefined;
    } | null;
    cache: Record<string, {
        value?: unknown;
        empty?: true | undefined;
    }>;
    eventsTriggered: Record<string, unknown>;
    operation: {
        name: string;
        done: boolean;
        metadata?: unknown;
        result?: ({
            response?: unknown;
        } & {
            error?: string | undefined;
            stacktrace?: string | undefined;
        }) | undefined;
        blockedOnStep?: {
            name: string;
            schema?: string | undefined;
        } | undefined;
    };
    executions: {
        traceIds: string[];
        startTime?: number | undefined;
        endTime?: number | undefined;
    }[];
    name?: string | undefined;
    input?: unknown;
    traceContext?: string | undefined;
}, {
    flowId: string;
    startTime: number;
    blockedOnStep: {
        name: string;
        schema?: string | undefined;
    } | null;
    cache: Record<string, {
        value?: unknown;
        empty?: true | undefined;
    }>;
    eventsTriggered: Record<string, unknown>;
    operation: {
        name: string;
        metadata?: unknown;
        result?: ({
            response?: unknown;
        } & {
            error?: string | undefined;
            stacktrace?: string | undefined;
        }) | undefined;
        done?: boolean | undefined;
        blockedOnStep?: {
            name: string;
            schema?: string | undefined;
        } | undefined;
    };
    executions: {
        traceIds: string[];
        startTime?: number | undefined;
        endTime?: number | undefined;
    }[];
    name?: string | undefined;
    input?: unknown;
    traceContext?: string | undefined;
}>;
export type FlowState = z.infer<typeof FlowStateSchema>;

import { Runner } from '../runner/runner';
import { EnvironmentVariable } from '../types/env';
export declare const TOOLS_SERVER_ROUTER: (runner: Runner) => import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
    ctx: object;
    meta: object;
    errorShape: import("@trpc/server").DefaultErrorShape | {
        data: {
            genkitErrorMessage: unknown;
            genkitErrorDetails: unknown;
            code: "NOT_FOUND" | "PARSE_ERROR" | "BAD_REQUEST" | "INTERNAL_SERVER_ERROR" | "NOT_IMPLEMENTED" | "UNAUTHORIZED" | "FORBIDDEN" | "METHOD_NOT_SUPPORTED" | "TIMEOUT" | "CONFLICT" | "PRECONDITION_FAILED" | "PAYLOAD_TOO_LARGE" | "UNPROCESSABLE_CONTENT" | "TOO_MANY_REQUESTS" | "CLIENT_CLOSED_REQUEST";
            httpStatus: number;
            path?: string | undefined;
            stack?: string | undefined;
        };
        message: string;
        code: import("@trpc/server/dist/rpc").TRPC_ERROR_CODE_NUMBER;
    };
    transformer: import("@trpc/server").DefaultDataTransformer;
}>, {
    listActions: import("@trpc/server").BuildProcedure<"query", {
        _config: import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape | {
                data: {
                    genkitErrorMessage: unknown;
                    genkitErrorDetails: unknown;
                    code: "NOT_FOUND" | "PARSE_ERROR" | "BAD_REQUEST" | "INTERNAL_SERVER_ERROR" | "NOT_IMPLEMENTED" | "UNAUTHORIZED" | "FORBIDDEN" | "METHOD_NOT_SUPPORTED" | "TIMEOUT" | "CONFLICT" | "PRECONDITION_FAILED" | "PAYLOAD_TOO_LARGE" | "UNPROCESSABLE_CONTENT" | "TOO_MANY_REQUESTS" | "CLIENT_CLOSED_REQUEST";
                    httpStatus: number;
                    path?: string | undefined;
                    stack?: string | undefined;
                };
                message: string;
                code: import("@trpc/server/dist/rpc").TRPC_ERROR_CODE_NUMBER;
            };
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>;
        _meta: object;
        _ctx_out: {};
        _input_in: typeof import("@trpc/server").unsetMarker;
        _input_out: typeof import("@trpc/server").unsetMarker;
        _output_in: typeof import("@trpc/server").unsetMarker;
        _output_out: typeof import("@trpc/server").unsetMarker;
    }, Record<string, {
        name: string;
        key: string;
        description?: string | null | undefined;
        inputSchema?: {} | null | undefined;
        outputSchema?: {} | null | undefined;
        metadata?: Record<string, string | number | bigint | boolean | {} | (string | number | bigint | boolean | {})[]> | null | undefined;
    }>>;
    runAction: import("@trpc/server").BuildProcedure<"mutation", {
        _config: import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape | {
                data: {
                    genkitErrorMessage: unknown;
                    genkitErrorDetails: unknown;
                    code: "NOT_FOUND" | "PARSE_ERROR" | "BAD_REQUEST" | "INTERNAL_SERVER_ERROR" | "NOT_IMPLEMENTED" | "UNAUTHORIZED" | "FORBIDDEN" | "METHOD_NOT_SUPPORTED" | "TIMEOUT" | "CONFLICT" | "PRECONDITION_FAILED" | "PAYLOAD_TOO_LARGE" | "UNPROCESSABLE_CONTENT" | "TOO_MANY_REQUESTS" | "CLIENT_CLOSED_REQUEST";
                    httpStatus: number;
                    path?: string | undefined;
                    stack?: string | undefined;
                };
                message: string;
                code: import("@trpc/server/dist/rpc").TRPC_ERROR_CODE_NUMBER;
            };
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>;
        _meta: object;
        _ctx_out: {};
        _input_in: {
            key: string;
            input?: any;
        };
        _input_out: {
            key: string;
            input?: any;
        };
        _output_in: typeof import("@trpc/server").unsetMarker;
        _output_out: typeof import("@trpc/server").unsetMarker;
    }, {
        result?: unknown;
        telemetry?: {
            traceId?: string | undefined;
        } | undefined;
    }>;
    createPrompt: import("@trpc/server").BuildProcedure<"mutation", {
        _config: import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape | {
                data: {
                    genkitErrorMessage: unknown;
                    genkitErrorDetails: unknown;
                    code: "NOT_FOUND" | "PARSE_ERROR" | "BAD_REQUEST" | "INTERNAL_SERVER_ERROR" | "NOT_IMPLEMENTED" | "UNAUTHORIZED" | "FORBIDDEN" | "METHOD_NOT_SUPPORTED" | "TIMEOUT" | "CONFLICT" | "PRECONDITION_FAILED" | "PAYLOAD_TOO_LARGE" | "UNPROCESSABLE_CONTENT" | "TOO_MANY_REQUESTS" | "CLIENT_CLOSED_REQUEST";
                    httpStatus: number;
                    path?: string | undefined;
                    stack?: string | undefined;
                };
                message: string;
                code: import("@trpc/server/dist/rpc").TRPC_ERROR_CODE_NUMBER;
            };
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>;
        _meta: object;
        _ctx_out: {};
        _input_in: {
            model: string;
            messages: {
                content: ({
                    text: string;
                    metadata?: Record<string, unknown> | undefined;
                    media?: undefined;
                    toolRequest?: undefined;
                    toolResponse?: undefined;
                    data?: unknown;
                } | {
                    media: {
                        url: string;
                        contentType?: string | undefined;
                    };
                    metadata?: Record<string, unknown> | undefined;
                    text?: undefined;
                    toolRequest?: undefined;
                    toolResponse?: undefined;
                    data?: unknown;
                } | {
                    toolRequest: {
                        name: string;
                        input?: unknown;
                        ref?: string | undefined;
                    };
                    metadata?: Record<string, unknown> | undefined;
                    text?: undefined;
                    media?: undefined;
                    toolResponse?: undefined;
                    data?: unknown;
                } | {
                    toolResponse: {
                        name: string;
                        output?: unknown;
                        ref?: string | undefined;
                    };
                    metadata?: Record<string, unknown> | undefined;
                    text?: undefined;
                    media?: undefined;
                    toolRequest?: undefined;
                    data?: unknown;
                } | {
                    metadata?: Record<string, unknown> | undefined;
                    text?: undefined;
                    media?: undefined;
                    toolRequest?: undefined;
                    toolResponse?: undefined;
                    data?: unknown;
                })[];
                role: "system" | "user" | "model" | "tool";
                metadata?: Record<string, unknown> | undefined;
            }[];
            tools?: {
                description: string;
                name: string;
                inputSchema: Record<string, any>;
                outputSchema?: Record<string, any> | undefined;
            }[] | undefined;
            config?: import("zod").objectInputType<{
                version: import("zod").ZodOptional<import("zod").ZodString>;
                temperature: import("zod").ZodOptional<import("zod").ZodNumber>;
                maxOutputTokens: import("zod").ZodOptional<import("zod").ZodNumber>;
                topK: import("zod").ZodOptional<import("zod").ZodNumber>;
                topP: import("zod").ZodOptional<import("zod").ZodNumber>;
                stopSequences: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
            }, import("zod").ZodTypeAny, "passthrough"> | undefined;
        };
        _input_out: {
            model: string;
            messages: {
                content: ({
                    text: string;
                    metadata?: Record<string, unknown> | undefined;
                    media?: undefined;
                    toolRequest?: undefined;
                    toolResponse?: undefined;
                    data?: unknown;
                } | {
                    media: {
                        url: string;
                        contentType?: string | undefined;
                    };
                    metadata?: Record<string, unknown> | undefined;
                    text?: undefined;
                    toolRequest?: undefined;
                    toolResponse?: undefined;
                    data?: unknown;
                } | {
                    toolRequest: {
                        name: string;
                        input?: unknown;
                        ref?: string | undefined;
                    };
                    metadata?: Record<string, unknown> | undefined;
                    text?: undefined;
                    media?: undefined;
                    toolResponse?: undefined;
                    data?: unknown;
                } | {
                    toolResponse: {
                        name: string;
                        output?: unknown;
                        ref?: string | undefined;
                    };
                    metadata?: Record<string, unknown> | undefined;
                    text?: undefined;
                    media?: undefined;
                    toolRequest?: undefined;
                    data?: unknown;
                } | {
                    metadata?: Record<string, unknown> | undefined;
                    text?: undefined;
                    media?: undefined;
                    toolRequest?: undefined;
                    toolResponse?: undefined;
                    data?: unknown;
                })[];
                role: "system" | "user" | "model" | "tool";
                metadata?: Record<string, unknown> | undefined;
            }[];
            tools?: {
                description: string;
                name: string;
                inputSchema: Record<string, any>;
                outputSchema?: Record<string, any> | undefined;
            }[] | undefined;
            config?: import("zod").objectOutputType<{
                version: import("zod").ZodOptional<import("zod").ZodString>;
                temperature: import("zod").ZodOptional<import("zod").ZodNumber>;
                maxOutputTokens: import("zod").ZodOptional<import("zod").ZodNumber>;
                topK: import("zod").ZodOptional<import("zod").ZodNumber>;
                topP: import("zod").ZodOptional<import("zod").ZodNumber>;
                stopSequences: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
            }, import("zod").ZodTypeAny, "passthrough"> | undefined;
        };
        _output_in: typeof import("@trpc/server").unsetMarker;
        _output_out: typeof import("@trpc/server").unsetMarker;
    }, string>;
    listTraces: import("@trpc/server").BuildProcedure<"query", {
        _config: import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape | {
                data: {
                    genkitErrorMessage: unknown;
                    genkitErrorDetails: unknown;
                    code: "NOT_FOUND" | "PARSE_ERROR" | "BAD_REQUEST" | "INTERNAL_SERVER_ERROR" | "NOT_IMPLEMENTED" | "UNAUTHORIZED" | "FORBIDDEN" | "METHOD_NOT_SUPPORTED" | "TIMEOUT" | "CONFLICT" | "PRECONDITION_FAILED" | "PAYLOAD_TOO_LARGE" | "UNPROCESSABLE_CONTENT" | "TOO_MANY_REQUESTS" | "CLIENT_CLOSED_REQUEST";
                    httpStatus: number;
                    path?: string | undefined;
                    stack?: string | undefined;
                };
                message: string;
                code: import("@trpc/server/dist/rpc").TRPC_ERROR_CODE_NUMBER;
            };
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>;
        _meta: object;
        _ctx_out: {};
        _input_in: {
            env?: "dev" | "prod" | undefined;
            limit?: number | undefined;
            continuationToken?: string | undefined;
        };
        _input_out: {
            env?: "dev" | "prod" | undefined;
            limit?: number | undefined;
            continuationToken?: string | undefined;
        };
        _output_in: typeof import("@trpc/server").unsetMarker;
        _output_out: typeof import("@trpc/server").unsetMarker;
    }, {
        traces: {
            traceId: string;
            spans: Record<string, {
                traceId: string;
                spanId: string;
                displayName: string;
                startTime: number;
                endTime: number;
                attributes: Record<string, unknown>;
                instrumentationLibrary: {
                    name: string;
                    version?: string | undefined;
                    schemaUrl?: string | undefined;
                };
                spanKind: string;
                status?: {
                    code: number;
                    message?: string | undefined;
                } | undefined;
                parentSpanId?: string | undefined;
                links?: {
                    context?: {
                        traceId: string;
                        spanId: string;
                        traceFlags: number;
                        isRemote?: boolean | undefined;
                    } | undefined;
                    attributes?: Record<string, unknown> | undefined;
                    droppedAttributesCount?: number | undefined;
                }[] | undefined;
                sameProcessAsParentSpan?: {
                    value: boolean;
                } | undefined;
                timeEvents?: {
                    timeEvent?: {
                        time: number;
                        annotation: {
                            description: string;
                            attributes: Record<string, unknown>;
                        };
                    }[] | undefined;
                } | undefined;
                truncated?: boolean | undefined;
            }>;
            displayName?: string | undefined;
            startTime?: number | undefined;
            endTime?: number | undefined;
        }[];
        continuationToken?: string | undefined;
    }>;
    getTrace: import("@trpc/server").BuildProcedure<"query", {
        _config: import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape | {
                data: {
                    genkitErrorMessage: unknown;
                    genkitErrorDetails: unknown;
                    code: "NOT_FOUND" | "PARSE_ERROR" | "BAD_REQUEST" | "INTERNAL_SERVER_ERROR" | "NOT_IMPLEMENTED" | "UNAUTHORIZED" | "FORBIDDEN" | "METHOD_NOT_SUPPORTED" | "TIMEOUT" | "CONFLICT" | "PRECONDITION_FAILED" | "PAYLOAD_TOO_LARGE" | "UNPROCESSABLE_CONTENT" | "TOO_MANY_REQUESTS" | "CLIENT_CLOSED_REQUEST";
                    httpStatus: number;
                    path?: string | undefined;
                    stack?: string | undefined;
                };
                message: string;
                code: import("@trpc/server/dist/rpc").TRPC_ERROR_CODE_NUMBER;
            };
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>;
        _meta: object;
        _ctx_out: {};
        _input_in: {
            traceId: string;
            env: "dev" | "prod";
        };
        _input_out: {
            traceId: string;
            env: "dev" | "prod";
        };
        _output_in: typeof import("@trpc/server").unsetMarker;
        _output_out: typeof import("@trpc/server").unsetMarker;
    }, {
        traceId: string;
        spans: Record<string, {
            traceId: string;
            spanId: string;
            displayName: string;
            startTime: number;
            endTime: number;
            attributes: Record<string, unknown>;
            instrumentationLibrary: {
                name: string;
                version?: string | undefined;
                schemaUrl?: string | undefined;
            };
            spanKind: string;
            status?: {
                code: number;
                message?: string | undefined;
            } | undefined;
            parentSpanId?: string | undefined;
            links?: {
                context?: {
                    traceId: string;
                    spanId: string;
                    traceFlags: number;
                    isRemote?: boolean | undefined;
                } | undefined;
                attributes?: Record<string, unknown> | undefined;
                droppedAttributesCount?: number | undefined;
            }[] | undefined;
            sameProcessAsParentSpan?: {
                value: boolean;
            } | undefined;
            timeEvents?: {
                timeEvent?: {
                    time: number;
                    annotation: {
                        description: string;
                        attributes: Record<string, unknown>;
                    };
                }[] | undefined;
            } | undefined;
            truncated?: boolean | undefined;
        }>;
        displayName?: string | undefined;
        startTime?: number | undefined;
        endTime?: number | undefined;
    }>;
    listFlowStates: import("@trpc/server").BuildProcedure<"query", {
        _config: import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape | {
                data: {
                    genkitErrorMessage: unknown;
                    genkitErrorDetails: unknown;
                    code: "NOT_FOUND" | "PARSE_ERROR" | "BAD_REQUEST" | "INTERNAL_SERVER_ERROR" | "NOT_IMPLEMENTED" | "UNAUTHORIZED" | "FORBIDDEN" | "METHOD_NOT_SUPPORTED" | "TIMEOUT" | "CONFLICT" | "PRECONDITION_FAILED" | "PAYLOAD_TOO_LARGE" | "UNPROCESSABLE_CONTENT" | "TOO_MANY_REQUESTS" | "CLIENT_CLOSED_REQUEST";
                    httpStatus: number;
                    path?: string | undefined;
                    stack?: string | undefined;
                };
                message: string;
                code: import("@trpc/server/dist/rpc").TRPC_ERROR_CODE_NUMBER;
            };
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>;
        _meta: object;
        _ctx_out: {};
        _input_in: {
            env?: "dev" | "prod" | undefined;
            limit?: number | undefined;
            continuationToken?: string | undefined;
        };
        _input_out: {
            env?: "dev" | "prod" | undefined;
            limit?: number | undefined;
            continuationToken?: string | undefined;
        };
        _output_in: typeof import("@trpc/server").unsetMarker;
        _output_out: typeof import("@trpc/server").unsetMarker;
    }, {
        flowStates: {
            flowId: string;
            startTime: number;
            blockedOnStep: {
                name: string;
                schema?: string | undefined;
            } | null;
            cache: Record<string, {
                value?: unknown;
                empty?: true | undefined;
            }>;
            eventsTriggered: Record<string, unknown>;
            operation: {
                name: string;
                done: boolean;
                metadata?: unknown;
                result?: ({
                    response?: unknown;
                } & {
                    error?: string | undefined;
                    stacktrace?: string | undefined;
                }) | undefined;
                blockedOnStep?: {
                    name: string;
                    schema?: string | undefined;
                } | undefined;
            };
            executions: {
                traceIds: string[];
                startTime?: number | undefined;
                endTime?: number | undefined;
            }[];
            name?: string | undefined;
            input?: unknown;
            traceContext?: string | undefined;
        }[];
        continuationToken?: string | undefined;
    }>;
    getFlowState: import("@trpc/server").BuildProcedure<"query", {
        _config: import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape | {
                data: {
                    genkitErrorMessage: unknown;
                    genkitErrorDetails: unknown;
                    code: "NOT_FOUND" | "PARSE_ERROR" | "BAD_REQUEST" | "INTERNAL_SERVER_ERROR" | "NOT_IMPLEMENTED" | "UNAUTHORIZED" | "FORBIDDEN" | "METHOD_NOT_SUPPORTED" | "TIMEOUT" | "CONFLICT" | "PRECONDITION_FAILED" | "PAYLOAD_TOO_LARGE" | "UNPROCESSABLE_CONTENT" | "TOO_MANY_REQUESTS" | "CLIENT_CLOSED_REQUEST";
                    httpStatus: number;
                    path?: string | undefined;
                    stack?: string | undefined;
                };
                message: string;
                code: import("@trpc/server/dist/rpc").TRPC_ERROR_CODE_NUMBER;
            };
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>;
        _meta: object;
        _ctx_out: {};
        _input_in: {
            flowId: string;
            env: "dev" | "prod";
        };
        _input_out: {
            flowId: string;
            env: "dev" | "prod";
        };
        _output_in: typeof import("@trpc/server").unsetMarker;
        _output_out: typeof import("@trpc/server").unsetMarker;
    }, {
        flowId: string;
        startTime: number;
        blockedOnStep: {
            name: string;
            schema?: string | undefined;
        } | null;
        cache: Record<string, {
            value?: unknown;
            empty?: true | undefined;
        }>;
        eventsTriggered: Record<string, unknown>;
        operation: {
            name: string;
            done: boolean;
            metadata?: unknown;
            result?: ({
                response?: unknown;
            } & {
                error?: string | undefined;
                stacktrace?: string | undefined;
            }) | undefined;
            blockedOnStep?: {
                name: string;
                schema?: string | undefined;
            } | undefined;
        };
        executions: {
            traceIds: string[];
            startTime?: number | undefined;
            endTime?: number | undefined;
        }[];
        name?: string | undefined;
        input?: unknown;
        traceContext?: string | undefined;
    }>;
    listEvalRunKeys: import("@trpc/server").BuildProcedure<"query", {
        _config: import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape | {
                data: {
                    genkitErrorMessage: unknown;
                    genkitErrorDetails: unknown;
                    code: "NOT_FOUND" | "PARSE_ERROR" | "BAD_REQUEST" | "INTERNAL_SERVER_ERROR" | "NOT_IMPLEMENTED" | "UNAUTHORIZED" | "FORBIDDEN" | "METHOD_NOT_SUPPORTED" | "TIMEOUT" | "CONFLICT" | "PRECONDITION_FAILED" | "PAYLOAD_TOO_LARGE" | "UNPROCESSABLE_CONTENT" | "TOO_MANY_REQUESTS" | "CLIENT_CLOSED_REQUEST";
                    httpStatus: number;
                    path?: string | undefined;
                    stack?: string | undefined;
                };
                message: string;
                code: import("@trpc/server/dist/rpc").TRPC_ERROR_CODE_NUMBER;
            };
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>;
        _meta: object;
        _ctx_out: {};
        _input_in: {
            filter?: {
                actionId?: string | undefined;
            } | undefined;
        };
        _input_out: {
            filter?: {
                actionId?: string | undefined;
            } | undefined;
        };
        _output_in: {
            evalRunKeys: {
                evalRunId: string;
                createdAt: string;
                actionId?: string | undefined;
            }[];
        };
        _output_out: {
            evalRunKeys: {
                evalRunId: string;
                createdAt: string;
                actionId?: string | undefined;
            }[];
        };
    }, unknown>;
    getEvalRun: import("@trpc/server").BuildProcedure<"query", {
        _config: import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape | {
                data: {
                    genkitErrorMessage: unknown;
                    genkitErrorDetails: unknown;
                    code: "NOT_FOUND" | "PARSE_ERROR" | "BAD_REQUEST" | "INTERNAL_SERVER_ERROR" | "NOT_IMPLEMENTED" | "UNAUTHORIZED" | "FORBIDDEN" | "METHOD_NOT_SUPPORTED" | "TIMEOUT" | "CONFLICT" | "PRECONDITION_FAILED" | "PAYLOAD_TOO_LARGE" | "UNPROCESSABLE_CONTENT" | "TOO_MANY_REQUESTS" | "CLIENT_CLOSED_REQUEST";
                    httpStatus: number;
                    path?: string | undefined;
                    stack?: string | undefined;
                };
                message: string;
                code: import("@trpc/server/dist/rpc").TRPC_ERROR_CODE_NUMBER;
            };
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>;
        _meta: object;
        _ctx_out: {};
        _input_in: {
            name: string;
        };
        _input_out: {
            name: string;
        };
        _output_in: {
            key: {
                evalRunId: string;
                createdAt: string;
                actionId?: string | undefined;
            };
            results: {
                testCaseId: string;
                traceIds: string[];
                input?: any;
                reference?: any;
                output?: any;
                error?: string | undefined;
                context?: string[] | undefined;
                metrics?: {
                    evaluator: string;
                    traceId?: string | undefined;
                    error?: string | undefined;
                    score?: string | number | boolean | undefined;
                    rationale?: string | undefined;
                    spanId?: string | undefined;
                }[] | undefined;
            }[];
            metricsMetadata?: Record<string, {
                displayName: string;
                definition: string;
            }> | undefined;
        };
        _output_out: {
            key: {
                evalRunId: string;
                createdAt: string;
                actionId?: string | undefined;
            };
            results: {
                testCaseId: string;
                traceIds: string[];
                input?: any;
                reference?: any;
                output?: any;
                error?: string | undefined;
                context?: string[] | undefined;
                metrics?: {
                    evaluator: string;
                    traceId?: string | undefined;
                    error?: string | undefined;
                    score?: string | number | boolean | undefined;
                    rationale?: string | undefined;
                    spanId?: string | undefined;
                }[] | undefined;
            }[];
            metricsMetadata?: Record<string, {
                displayName: string;
                definition: string;
            }> | undefined;
        };
    }, unknown>;
    sendPageView: import("@trpc/server").BuildProcedure<"query", {
        _config: import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape | {
                data: {
                    genkitErrorMessage: unknown;
                    genkitErrorDetails: unknown;
                    code: "NOT_FOUND" | "PARSE_ERROR" | "BAD_REQUEST" | "INTERNAL_SERVER_ERROR" | "NOT_IMPLEMENTED" | "UNAUTHORIZED" | "FORBIDDEN" | "METHOD_NOT_SUPPORTED" | "TIMEOUT" | "CONFLICT" | "PRECONDITION_FAILED" | "PAYLOAD_TOO_LARGE" | "UNPROCESSABLE_CONTENT" | "TOO_MANY_REQUESTS" | "CLIENT_CLOSED_REQUEST";
                    httpStatus: number;
                    path?: string | undefined;
                    stack?: string | undefined;
                };
                message: string;
                code: import("@trpc/server/dist/rpc").TRPC_ERROR_CODE_NUMBER;
            };
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>;
        _meta: object;
        _ctx_out: object;
        _input_in: {
            pageTitle: string;
        };
        _input_out: {
            pageTitle: string;
        };
        _output_in: typeof import("@trpc/server").unsetMarker;
        _output_out: typeof import("@trpc/server").unsetMarker;
    }, void>;
    getGenkitEnvironment: import("@trpc/server").BuildProcedure<"query", {
        _config: import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape | {
                data: {
                    genkitErrorMessage: unknown;
                    genkitErrorDetails: unknown;
                    code: "NOT_FOUND" | "PARSE_ERROR" | "BAD_REQUEST" | "INTERNAL_SERVER_ERROR" | "NOT_IMPLEMENTED" | "UNAUTHORIZED" | "FORBIDDEN" | "METHOD_NOT_SUPPORTED" | "TIMEOUT" | "CONFLICT" | "PRECONDITION_FAILED" | "PAYLOAD_TOO_LARGE" | "UNPROCESSABLE_CONTENT" | "TOO_MANY_REQUESTS" | "CLIENT_CLOSED_REQUEST";
                    httpStatus: number;
                    path?: string | undefined;
                    stack?: string | undefined;
                };
                message: string;
                code: import("@trpc/server/dist/rpc").TRPC_ERROR_CODE_NUMBER;
            };
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>;
        _ctx_out: object;
        _input_in: typeof import("@trpc/server").unsetMarker;
        _input_out: typeof import("@trpc/server").unsetMarker;
        _output_in: typeof import("@trpc/server").unsetMarker;
        _output_out: typeof import("@trpc/server").unsetMarker;
        _meta: object;
    }, {
        cliPackageVersion: any;
        environmentVars: EnvironmentVariable[];
    }>;
}>;
export type ToolsServerRouter = ReturnType<typeof TOOLS_SERVER_ROUTER>;

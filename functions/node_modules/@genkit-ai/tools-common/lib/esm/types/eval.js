import { z } from 'zod';
export const EvalFlowStructuredInputSchema = z.object({
    samples: z.array(z.object({
        input: z.any(),
        reference: z.any().optional(),
    })),
});
export const EvalFlowInputSchema = z.union([
    z.array(z.any()),
    EvalFlowStructuredInputSchema,
]);
export const EvalInputSchema = z.object({
    testCaseId: z.string(),
    input: z.any(),
    output: z.any(),
    error: z.string().optional(),
    context: z.array(z.string()).optional(),
    reference: z.any().optional(),
    traceIds: z.array(z.string()),
});
export const EvalMetricSchema = z.object({
    evaluator: z.string(),
    score: z.union([z.number(), z.string(), z.boolean()]).optional(),
    rationale: z.string().optional(),
    error: z.string().optional(),
    traceId: z.string().optional(),
    spanId: z.string().optional(),
});
export const EvalResultSchema = EvalInputSchema.extend({
    metrics: z.array(EvalMetricSchema).optional(),
});
export const EvalRunKeySchema = z.object({
    actionId: z.string().optional(),
    evalRunId: z.string(),
    createdAt: z.string(),
});
export const EvalRunSchema = z.object({
    key: EvalRunKeySchema,
    results: z.array(EvalResultSchema),
    metricsMetadata: z
        .record(z.string(), z.object({
        displayName: z.string(),
        definition: z.string(),
    }))
        .optional(),
});
//# sourceMappingURL=eval.js.map
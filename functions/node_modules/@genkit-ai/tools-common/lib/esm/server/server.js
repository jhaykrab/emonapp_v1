import * as trpcExpress from '@trpc/server/adapters/express';
import * as bodyParser from 'body-parser';
import * as clc from 'colorette';
import express from 'express';
import open from 'open';
import os from 'os';
import path from 'path';
import { logger } from '../utils/logger';
import { toolsPackage } from '../utils/package';
import { downloadAndExtractUiAssets } from '../utils/ui-assets';
import { TOOLS_SERVER_ROUTER } from './router';
const UI_ASSETS_GCS_BUCKET = `https://storage.googleapis.com/genkit-assets`;
const UI_ASSETS_ZIP_FILE_NAME = `${toolsPackage.version}.zip`;
const UI_ASSETS_ZIP_GCS_PATH = `${UI_ASSETS_GCS_BUCKET}/${UI_ASSETS_ZIP_FILE_NAME}`;
const UI_ASSETS_ROOT = path.resolve(os.homedir(), '.genkit', 'assets', toolsPackage.version);
const UI_ASSETS_SERVE_PATH = path.resolve(UI_ASSETS_ROOT, 'ui', 'browser');
const API_BASE_PATH = '/api';
export function startServer(runner, headless, port, openBrowser) {
    let serverEnder = undefined;
    const enderPromise = new Promise((resolver) => {
        serverEnder = resolver;
    });
    const app = express();
    if (!headless) {
        downloadAndExtractUiAssets({
            fileUrl: UI_ASSETS_ZIP_GCS_PATH,
            extractPath: UI_ASSETS_ROOT,
            zipFileName: UI_ASSETS_ZIP_FILE_NAME,
        });
        app.use(express.static(UI_ASSETS_SERVE_PATH));
    }
    app.options('/api/streamAction', async (req, res) => {
        res.setHeader('Access-Control-Allow-Origin', '*');
        res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
        res.status(200).send('');
    });
    app.post('/api/streamAction', bodyParser.json(), async (req, res) => {
        const { key, input } = req.body;
        res.writeHead(200, {
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Headers': 'Content-Type',
            'Content-Type': 'text/plain',
            'Transfer-Encoding': 'chunked',
        });
        const result = await runner.runAction({ key, input }, (chunk) => {
            res.write(JSON.stringify(chunk) + '\n');
        });
        res.write(JSON.stringify(result));
        res.end();
    });
    app.use(API_BASE_PATH, (req, res, next) => {
        res.setHeader('Access-Control-Allow-Origin', '*');
        res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
        if (req.method === 'OPTIONS')
            res.send('');
        else
            next();
    }, trpcExpress.createExpressMiddleware({
        router: TOOLS_SERVER_ROUTER(runner),
    }));
    const errorHandler = (error, request, response, next) => {
        if (error instanceof Error) {
            logger.error(error.stack);
        }
        return response.status(500).send(error);
    };
    app.use(errorHandler);
    app.all('*', (req, res) => {
        res.status(200).sendFile('/', { root: UI_ASSETS_SERVE_PATH });
    });
    app.listen(port, () => {
        logger.info(`Genkit Tools API: http://localhost:${port}/api`);
        if (!headless) {
            const uiUrl = 'http://localhost:' + port;
            runner
                .waitUntilHealthy()
                .then(() => {
                logger.info(`${clc.green(clc.bold('Genkit Tools UI:'))} ${uiUrl}`);
                if (openBrowser) {
                    open(uiUrl);
                }
            })
                .catch((e) => {
                logger.error(e.message);
                if (serverEnder)
                    serverEnder();
            });
        }
    });
    return enderPromise;
}
//# sourceMappingURL=server.js.map
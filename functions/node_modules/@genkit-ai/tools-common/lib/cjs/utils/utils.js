"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.detectRuntime = exports.getEntryPoint = exports.getNodeEntryPoint = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
function getNodeEntryPoint(directory) {
    const packageJsonPath = path.join(directory, 'package.json');
    let entryPoint = 'lib/index.js';
    if (fs.existsSync(packageJsonPath)) {
        const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
        entryPoint = packageJson.main;
    }
    return entryPoint;
}
exports.getNodeEntryPoint = getNodeEntryPoint;
function getEntryPoint(directory) {
    const runtime = detectRuntime(directory);
    switch (runtime) {
        case 'nodejs':
            return getNodeEntryPoint(directory);
        case 'go':
            return '.';
        default:
            return;
    }
}
exports.getEntryPoint = getEntryPoint;
function detectRuntime(directory) {
    const files = fs.readdirSync(directory);
    for (const file of files) {
        const filePath = path.join(directory, file);
        const stat = fs.statSync(filePath);
        if (stat.isFile() && (path.extname(file) === '.go' || file === 'go.mod')) {
            return 'go';
        }
    }
    if (fs.existsSync(path.join(directory, 'package.json'))) {
        return 'nodejs';
    }
    return undefined;
}
exports.detectRuntime = detectRuntime;
//# sourceMappingURL=utils.js.map
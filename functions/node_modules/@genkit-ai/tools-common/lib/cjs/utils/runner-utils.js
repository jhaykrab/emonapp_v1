"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFlowState = exports.waitForFlowToComplete = exports.runInRunnerThenStop = exports.startRunner = void 0;
const runner_1 = require("../runner/runner");
const logger_1 = require("./logger");
async function startRunner() {
    const runner = new runner_1.Runner({ autoReload: false, buildOnStart: true });
    if (!(await runner.start())) {
        throw new Error('Failed to load app code.');
    }
    await runner.waitUntilHealthy();
    return runner;
}
exports.startRunner = startRunner;
async function runInRunnerThenStop(fn) {
    let runner;
    try {
        runner = await startRunner();
    }
    catch (e) {
        process.exit(1);
    }
    try {
        await fn(runner);
    }
    catch (err) {
        logger_1.logger.info('Command exited with an Error:');
        const error = err;
        if (typeof error.data === 'object') {
            const errorStatus = error.data;
            const { code, details, message } = errorStatus;
            logger_1.logger.info(`\tCode: ${code}`);
            logger_1.logger.info(`\tMessage: ${message}`);
            logger_1.logger.info(`\tTrace: http://localhost:4200/traces/${details.traceId}\n`);
        }
        else {
            logger_1.logger.info(`\tMessage: ${error.data}\n`);
        }
        logger_1.logger.error('Stacktrace:');
        logger_1.logger.error(`${error.stack}`);
    }
    finally {
        await runner.sendQuit();
        await runner.stop();
    }
}
exports.runInRunnerThenStop = runInRunnerThenStop;
async function waitForFlowToComplete(runner, flowName, flowId) {
    let state;
    while (true) {
        state = await getFlowState(runner, flowName, flowId);
        if (state.operation.done) {
            break;
        }
        await new Promise((r) => setTimeout(r, 1000));
    }
    return state;
}
exports.waitForFlowToComplete = waitForFlowToComplete;
async function getFlowState(runner, flowName, flowId) {
    return (await runner.runAction({
        key: `/flow/${flowName}`,
        input: {
            state: {
                flowId,
            },
        },
    })).result;
}
exports.getFlowState = getFlowState;
//# sourceMappingURL=runner-utils.js.map
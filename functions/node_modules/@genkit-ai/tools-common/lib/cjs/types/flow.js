"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlowStateSchema = exports.OperationSchema = exports.FlowResultSchema = exports.FlowErrorSchema = exports.FlowResponseSchema = exports.FlowStateExecutionSchema = exports.FlowInvokeEnvelopeMessageSchema = void 0;
const zod_to_openapi_1 = require("@asteasolutions/zod-to-openapi");
const z = __importStar(require("zod"));
(0, zod_to_openapi_1.extendZodWithOpenApi)(z);
exports.FlowInvokeEnvelopeMessageSchema = z.object({
    start: z
        .object({
        input: z.unknown().optional(),
        labels: z.record(z.string(), z.string()).optional(),
    })
        .optional(),
    schedule: z
        .object({
        input: z.unknown().optional(),
        delay: z.number().optional(),
    })
        .optional(),
    runScheduled: z
        .object({
        flowId: z.string(),
    })
        .optional(),
    retry: z
        .object({
        flowId: z.string(),
    })
        .optional(),
    resume: z
        .object({
        flowId: z.string(),
        payload: z.unknown().optional(),
    })
        .optional(),
    state: z
        .object({
        flowId: z.string(),
    })
        .optional(),
});
exports.FlowStateExecutionSchema = z.object({
    startTime: z
        .number()
        .optional()
        .describe('start time in milliseconds since the epoch'),
    endTime: z
        .number()
        .optional()
        .describe('end time in milliseconds since the epoch'),
    traceIds: z.array(z.string()),
});
exports.FlowResponseSchema = z.object({
    response: z.unknown().nullable(),
});
exports.FlowErrorSchema = z.object({
    error: z.string().optional(),
    stacktrace: z.string().optional(),
});
exports.FlowResultSchema = exports.FlowResponseSchema.and(exports.FlowErrorSchema);
exports.OperationSchema = z.object({
    name: z
        .string()
        .describe('server-assigned name, which is only unique within the same service that originally ' +
        'returns it.'),
    metadata: z
        .unknown()
        .optional()
        .describe('Service-specific metadata associated with the operation. It typically contains progress ' +
        'information and common metadata such as create time.'),
    done: z
        .boolean()
        .optional()
        .default(false)
        .describe('If the value is false, it means the operation is still in progress. If true, the ' +
        'operation is completed, and either error or response is available.'),
    result: exports.FlowResultSchema.optional(),
    blockedOnStep: z
        .object({
        name: z.string(),
        schema: z.string().optional(),
    })
        .optional(),
});
exports.FlowStateSchema = z
    .object({
    name: z.string().optional(),
    flowId: z.string(),
    input: z.unknown(),
    startTime: z
        .number()
        .describe('start time in milliseconds since the epoch'),
    cache: z.record(z.string(), z.object({
        value: z.unknown().optional(),
        empty: z.literal(true).optional(),
    })),
    eventsTriggered: z.record(z.string(), z.unknown()),
    blockedOnStep: z
        .object({
        name: z.string(),
        schema: z.string().optional(),
    })
        .nullable(),
    operation: exports.OperationSchema,
    traceContext: z.string().optional(),
    executions: z.array(exports.FlowStateExecutionSchema),
})
    .openapi('FlowState');
//# sourceMappingURL=flow.js.map
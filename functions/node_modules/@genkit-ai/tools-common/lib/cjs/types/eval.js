"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EvalRunSchema = exports.EvalRunKeySchema = exports.EvalResultSchema = exports.EvalMetricSchema = exports.EvalInputSchema = exports.EvalFlowInputSchema = exports.EvalFlowStructuredInputSchema = void 0;
const zod_1 = require("zod");
exports.EvalFlowStructuredInputSchema = zod_1.z.object({
    samples: zod_1.z.array(zod_1.z.object({
        input: zod_1.z.any(),
        reference: zod_1.z.any().optional(),
    })),
});
exports.EvalFlowInputSchema = zod_1.z.union([
    zod_1.z.array(zod_1.z.any()),
    exports.EvalFlowStructuredInputSchema,
]);
exports.EvalInputSchema = zod_1.z.object({
    testCaseId: zod_1.z.string(),
    input: zod_1.z.any(),
    output: zod_1.z.any(),
    error: zod_1.z.string().optional(),
    context: zod_1.z.array(zod_1.z.string()).optional(),
    reference: zod_1.z.any().optional(),
    traceIds: zod_1.z.array(zod_1.z.string()),
});
exports.EvalMetricSchema = zod_1.z.object({
    evaluator: zod_1.z.string(),
    score: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.boolean()]).optional(),
    rationale: zod_1.z.string().optional(),
    error: zod_1.z.string().optional(),
    traceId: zod_1.z.string().optional(),
    spanId: zod_1.z.string().optional(),
});
exports.EvalResultSchema = exports.EvalInputSchema.extend({
    metrics: zod_1.z.array(exports.EvalMetricSchema).optional(),
});
exports.EvalRunKeySchema = zod_1.z.object({
    actionId: zod_1.z.string().optional(),
    evalRunId: zod_1.z.string(),
    createdAt: zod_1.z.string(),
});
exports.EvalRunSchema = zod_1.z.object({
    key: exports.EvalRunKeySchema,
    results: zod_1.z.array(exports.EvalResultSchema),
    metricsMetadata: zod_1.z
        .record(zod_1.z.string(), zod_1.z.object({
        displayName: zod_1.z.string(),
        definition: zod_1.z.string(),
    }))
        .optional(),
});
//# sourceMappingURL=eval.js.map
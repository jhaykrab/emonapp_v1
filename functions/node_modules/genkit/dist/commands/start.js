"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.start = void 0;
const runner_1 = require("@genkit-ai/tools-common/runner");
const server_1 = require("@genkit-ai/tools-common/server");
const utils_1 = require("@genkit-ai/tools-common/utils");
const clc = __importStar(require("colorette"));
const commander_1 = require("commander");
exports.start = new commander_1.Command('start')
    .description('run the app in dev mode and start a Developer UI')
    .option('-x, --headless', 'Do not serve static UI files (for development)', false)
    .option('-p, --port <number>', 'Port to serve on. Default is 4000', '4000')
    .option('-o, --open', 'Open the browser with the Developer UI')
    .option('-a, --attach <number>', 'Externally running dev process address to attach to')
    .action(async (options) => {
    const port = Number(options.port);
    if (isNaN(port) || port < 0) {
        utils_1.logger.error(`"${options.port}" is not a valid port number`);
        return;
    }
    const runner = new runner_1.Runner();
    if (options.attach) {
        try {
            await runner.attach(options.attach);
        }
        catch (e) {
            utils_1.logger.error(clc.red(clc.bold(e.message)));
            return;
        }
    }
    else {
        await runner.start();
    }
    return (0, server_1.startServer)(runner, options.headless ?? false, port, !!options.open);
});
//# sourceMappingURL=start.js.map
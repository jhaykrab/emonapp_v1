"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.flowRun = void 0;
const utils_1 = require("@genkit-ai/tools-common/utils");
const commander_1 = require("commander");
const promises_1 = require("fs/promises");
exports.flowRun = new commander_1.Command('flow:run')
    .description('run a flow using provided data as input')
    .argument('<flowName>', 'name of the flow to run')
    .argument('[data]', 'JSON data to use to start the flow')
    .option('-w, --wait', 'Wait for the flow to complete', false)
    .option('-s, --stream', 'Stream output', false)
    .option('-a, --auth <JSON>', 'JSON object passed to authPolicy and stored in local state as auth', '')
    .option('--output <filename>', 'name of the output file to store the extracted data')
    .action(async (flowName, data, options) => {
    await (0, utils_1.runInRunnerThenStop)(async (runner) => {
        utils_1.logger.info(`Running '/flow/${flowName}' (stream=${options.stream})...`);
        let state = (await runner.runAction({
            key: `/flow/${flowName}`,
            input: {
                start: {
                    input: data ? JSON.parse(data) : undefined,
                },
                auth: options.auth ? JSON.parse(options.auth) : undefined,
            },
        }, options.stream
            ? (chunk) => console.log(JSON.stringify(chunk, undefined, '  '))
            : undefined)).result;
        if (!state.operation.done && options.wait) {
            utils_1.logger.info('Started flow run, waiting for it to complete...');
            state = await (0, utils_1.waitForFlowToComplete)(runner, flowName, state.flowId);
        }
        utils_1.logger.info('Flow operation:\n' + JSON.stringify(state.operation, undefined, '  '));
        if (options.output && state.operation.result?.response) {
            await (0, promises_1.writeFile)(options.output, JSON.stringify(state.operation.result?.response, undefined, ' '));
        }
    });
});
//# sourceMappingURL=flow-run.js.map
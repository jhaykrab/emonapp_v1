"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initGo = void 0;
const utils_1 = require("@genkit-ai/tools-common/utils");
const child_process_1 = require("child_process");
const fs_1 = __importDefault(require("fs"));
const inquirer = __importStar(require("inquirer"));
const ora_1 = __importDefault(require("ora"));
const path_1 = __importDefault(require("path"));
const init_1 = require("../init");
const templatePath = '../../../config/main.go.template';
const modelOptions = {
    googleai: {
        label: 'Google AI',
        package: 'github.com/firebase/genkit/go/plugins/googleai',
        init: `// Initialize the Google AI plugin. When you pass an empty string for the
\t// apiKey parameter, the Google AI plugin will use the value from the
\t// GOOGLE_GENAI_API_KEY environment variable, which is the recommended
\t// practice.
\tif err := googleai.Init(ctx, nil); err != nil {
\t\tlog.Fatal(err)
\t}`,
        lookup: `// The Google AI API provides access to several generative models. Here,
\t\t// we specify gemini-1.5-flash.
\t\tm := googleai.Model("gemini-1.5-flash")`,
    },
    vertexai: {
        label: 'Google Cloud Vertex AI',
        package: 'github.com/firebase/genkit/go/plugins/vertexai',
        init: `// Initialize the Vertex AI plugin. When you pass an empty string for the
\t// projectID parameter, the Vertex AI plugin will use the value from the
\t// GCLOUD_PROJECT environment variable. When you pass an empty string for
\t// the location parameter, the plugin uses the default value, us-central1.
\tif err := vertexai.Init(ctx, nil); err != nil {
\t\tlog.Fatal(err)
\t}`,
        lookup: `// The Vertex AI API provides access to several generative models. Here,
\t\t// we specify gemini-1.5-flash.
\t\tm := vertexai.Model("gemini-1.5-flash")`,
    },
    ollama: {
        label: 'Ollama (e.g. Gemma)',
        package: 'github.com/firebase/genkit/go/plugins/ollama',
        init: `// Initialize the Ollama plugin.
\terr := ollama.Init(ctx,
\t\t// The address of your Ollama API server. This is often a different host
\t\t// from your app backend (which runs Genkit), in order to run Ollama on
\t\t// a GPU-accelerated machine.
\t\t"http://127.0.0.1:11434")
\tif err != nil {
\t\tlog.Fatal(err)
\t}
\t// The models you want to use. These must already be downloaded and
\t// available to the Ollama server.
\tollama.DefineModel(ollama.ModelDefinition{Name: "gemma"}, nil)`,
        lookup: `// Ollama provides an interface to many open generative models. Here,
\t\t// we specify Google's Gemma model, which we configured the Ollama
\t\t// plugin to provide, above.
\t\tm := ollama.Model("gemma")`,
    },
    none: {
        label: 'None',
        package: '',
        init: 'nil // TODO: Initialize a model.',
        lookup: 'nil // TODO: Look up a model.',
    },
};
const platformOptions = {
    googlecloud: 'Google Cloud',
    other: 'Other platforms',
};
const corePackages = [
    'github.com/firebase/genkit/go/ai',
    'github.com/firebase/genkit/go/genkit',
];
async function initGo(options, isNew) {
    let { platform, model } = options;
    const supportedPlatforms = Object.keys(platformOptions);
    if (platform && !supportedPlatforms.includes(platform)) {
        throw new Error(`\`${platform}\` is not a supported platform for Go. Supported platforms: ${supportedPlatforms}`);
    }
    const supportedModels = Object.keys(modelOptions);
    if (model && !supportedModels.includes(model)) {
        throw new Error(`\`${model}\` is not a supported model provider for Go. Supported model providers: ${supportedModels}`);
    }
    if (!model) {
        const answer = await inquirer.prompt([
            {
                type: 'list',
                name: 'model',
                message: 'Select a model provider:',
                choices: supportedModels.map((model) => ({
                    name: modelOptions[model].label,
                    value: model,
                })),
            },
        ]);
        model = answer.model;
    }
    const packages = [...corePackages];
    if (modelOptions[model]?.package) {
        packages.push(modelOptions[model].package);
    }
    if (isNew) {
        const answer = await inquirer.prompt([
            {
                type: 'input',
                name: 'module',
                message: 'Enter the Go module name (e.g. github.com/user/genkit-go-app):',
            },
        ]);
        try {
            (0, child_process_1.execSync)(`go mod init ${answer.module}`, { stdio: 'ignore' });
        }
        catch (err) {
            utils_1.logger.error(`Failed to initialize Go project: ${err}`);
            process.exit(1);
        }
    }
    installPackages(packages);
    if (options.nonInteractive ||
        (await (0, init_1.confirm)({
            message: 'Would you like to generate a sample flow?',
            default: true,
        }))) {
        await generateSampleFile(model);
    }
    (0, init_1.showModelInfo)(model);
    await (0, utils_1.record)(new utils_1.InitEvent('go'));
}
exports.initGo = initGo;
function installPackages(packages) {
    const spinner = (0, ora_1.default)('Installing Go packages').start();
    try {
        (0, child_process_1.execSync)(`go get ${packages.map((p) => p + '@latest').join(' ')}`, {
            stdio: 'ignore',
        });
        spinner.succeed('Successfully installed Go packages');
    }
    catch (err) {
        spinner.fail(`Error installing packages: ${err}`);
        process.exit(1);
    }
}
async function generateSampleFile(model) {
    let filename = 'main.go';
    let samplePath = path_1.default.join(process.cwd(), filename);
    let write = true;
    if (fs_1.default.existsSync(samplePath)) {
        filename = 'genkit.go';
        samplePath = path_1.default.join(process.cwd(), filename);
        if (fs_1.default.existsSync(samplePath)) {
            write = await (0, init_1.confirm)({
                message: `${filename} already exists. Would you like to overwrite it?`,
                default: false,
            });
        }
    }
    const spinner = (0, ora_1.default)('Generating sample file').start();
    try {
        const fullPath = path_1.default.join(__dirname, templatePath);
        let sample = fs_1.default.readFileSync(fullPath, 'utf8');
        const modelOption = modelOptions[model];
        sample = sample
            .replace('$GENKIT_FUNC_NAME', filename === 'genkit.go' ? 'initGenkit' : 'main')
            .replace('$GENKIT_MODEL_IMPORT', modelOption.package
            ? `\n\t// Import the ${modelOption.label} plugin.\n\t"${modelOption.package}"`
            : '')
            .replace('$GENKIT_MODEL_INIT', modelOption.init)
            .replace('$GENKIT_MODEL_LOOKUP', modelOption.lookup);
        if (write) {
            fs_1.default.writeFileSync(samplePath, sample, 'utf8');
            spinner.succeed(`Successfully generated sample file (${filename})`);
        }
        else {
            spinner.warn('Skipped generating sample file');
        }
    }
    catch (err) {
        spinner.fail(`Failed to generate sample file: ${err}`);
        process.exit(1);
    }
}
//# sourceMappingURL=init-go.js.map
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.confirm = exports.showModelInfo = exports.init = void 0;
const utils_1 = require("@genkit-ai/tools-common/utils");
const commander_1 = require("commander");
const inquirer = __importStar(require("inquirer"));
const init_go_1 = require("./init/init-go");
const init_nodejs_1 = require("./init/init-nodejs");
const supportedRuntimes = {
    nodejs: 'Node.js',
    go: 'Go (preview)',
};
exports.init = new commander_1.Command('init')
    .description('initialize a project directory with Genkit')
    .option('-p, --platform <platform>', 'Deployment platform (firebase, googlecloud, or other)')
    .option('-m, --model <model>', 'Model provider (googleai, vertexai, ollama, or none)')
    .option('--non-interactive', 'Run init in non-interactive mode (experimental)')
    .option('-d, --dist-archive <distArchive>', 'Path to local Genkit dist archive')
    .action(async (options) => {
    var isNew = false;
    var runtime = (0, utils_1.detectRuntime)(process.cwd());
    if (!runtime) {
        utils_1.logger.info('No runtime was detected in the current directory.');
        const answer = await inquirer.prompt([
            {
                type: 'list',
                name: 'runtime',
                message: 'Select a runtime to initialize a Genkit project:',
                choices: Object.keys(supportedRuntimes).map((runtime) => ({
                    name: supportedRuntimes[runtime],
                    value: runtime,
                })),
            },
        ]);
        runtime = answer.runtime;
        isNew = true;
    }
    else if (!supportedRuntimes[runtime]) {
        utils_1.logger.error(`The runtime could not be detected or is not supported. Supported runtimes: ${Object.keys(supportedRuntimes)}`);
        process.exit(1);
    }
    try {
        switch (runtime) {
            case 'nodejs':
                await (0, init_nodejs_1.initNodejs)(options, isNew);
                break;
            case 'go':
                await (0, init_go_1.initGo)(options, isNew);
                break;
        }
    }
    catch (err) {
        utils_1.logger.error(err);
        process.exit(1);
    }
    utils_1.logger.info('Genkit successfully initialized.');
});
function showModelInfo(model) {
    switch (model) {
        case 'googleai':
            utils_1.logger.warn(`Google AI is currently available in limited regions. For a complete list, see https://ai.google.dev/available_regions#available_regions`);
            break;
        case 'vertexai':
            utils_1.logger.info(`Run the following command to enable Vertex AI in your Google Cloud project:\n\n  gcloud services enable aiplatform.googleapis.com\n`);
            break;
        case 'ollama':
            utils_1.logger.info(`If you don't have Ollama already installed and configured, refer to https://developers.google.com/genkit/plugins/ollama\n`);
            break;
    }
}
exports.showModelInfo = showModelInfo;
async function confirm(args) {
    const message = args.message ?? `Do you wish to continue?`;
    const answer = await inquirer.prompt({
        type: 'confirm',
        name: 'confirm',
        message,
        default: args.default,
    });
    return answer.confirm;
}
exports.confirm = confirm;
//# sourceMappingURL=init.js.map